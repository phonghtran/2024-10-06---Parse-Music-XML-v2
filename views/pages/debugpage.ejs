<%- include ('../partials/head.ejs') %>

    <style>
        table {
            border-collapse: collapse;
            border: 1px solid black;
        }

        td,
        th {
            border: 1px solid black;
            min-width: auto
        }

        #filter {
            padding: 1rem;
        }

        #selectGenres {
            display: none;
            background-color: var(--colorBackground);
            border: 1px var(--colorSecondary1) solid;
            list-style: none;
            max-height: 18rem;
            padding: 0;
            position: absolute;
            left: 1rem;
            top: 5rem;
            overflow-y: auto;
            overflow-x: hidden;
            width: 12rem;
        }

        #selectGenres.active {
            display: block;
        }

        #selectGenres li {
            cursor: pointer;
            padding: .25rem;
        }

        #selectGenres li:hover {
            background-color: var(--colorSecondary2);
        }
    </style>
    </head>

    <body>


        <%- include ('../partials/nav.ejs') %>

            <!-- <p>"npm run dev" // "rs" to restart server live</p>
 -->


            <div id="filter">
                <input type="text" name="inputGenre" id="inputGenre">


                <ul id="selectGenres">

                </ul>
            </div>


            <p id="tableCount"></p>
            <table id="tracks"></table>

            <script>
                // console.log('fetching')

                let tablecount = 0;
                let sortType = 'debug'
                let currentGenre = 'rap'
                let delayUpdate = ''
                let listGenres = {}
                let searchGenres = []
                // fetchTable()
                getGenreList()

                const selectGenres = document.getElementById("selectGenres")


                // ******************************************
                // ******************************************
                // genre input box
                // ******************************************
                // ******************************************
                const inputGenre = document.getElementById("inputGenre")

                inputGenre.value = currentGenre
                inputGenre.addEventListener('keyup', (e) => {
                    currentGenre = inputGenre.value
                    selectGenres.className = 'active'
                    populateAutoComplete()

                    // clearTimeout(delayUpdate)
                    // delayUpdate = setTimeout(updateSearchGenres, 1500); // 5000 milliseconds = 5 seconds

                    if (event.key === 'Enter') {
                        updateSearchGenres()
                    }
                })



                inputGenre.addEventListener('focus', function (event) {
                    selectGenres.className = 'active';
                })

                inputGenre.addEventListener('blur', function (event) {
                    // selectGenres.className = ''
                })


                // ******************************************
                // ******************************************
                // autocomplete list 
                // ******************************************
                // ******************************************

                selectGenres.addEventListener('click', function (event) {

                    if (event.target && event.target.classList.contains('dynamic-element')) {

                        console.log(event.target.innerHTML)
                        currentGenre = event.target.innerHTML
                        inputGenre.value = currentGenre



                        updateSearchGenres()
                    }
                });


                // ******************************************
                // ******************************************
                // update the list to send and fetch
                // ******************************************
                // ******************************************
                function updateSearchGenres() {

                    searchGenres = []
                    const regex = new RegExp(currentGenre, 'i'); // Create a case-insensitive regex



                    for (genre in listGenres) {
                        const stripped = genre.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, '');
                        if (regex.test(stripped)) {
                            searchGenres.push(genre)
                            // to list

                        } // test if serach is in genre
                    }//

                    console.log(searchGenres)

                    populateAutoComplete()
                    selectGenres.className = ''
                    fetchTable()
                }



                // ******************************************
                // ******************************************
                // update the autocomplete
                // ******************************************
                // ******************************************
                function populateAutoComplete() {
                    // console.log(listGenres)
                    const regex = new RegExp(currentGenre, 'i'); // Create a case-insensitive regex


                    selectGenres.innerHTML = ''
                    for (genre in listGenres) {
                        const stripped = genre.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, '');
                        if (regex.test(stripped)) {
                            const entry = document.createElement('li');
                            entry.classList.add('dynamic-element');

                            entry.innerHTML = genre
                            selectGenres.appendChild(entry)
                        } // test if serach is in genre


                    }
                }


                // ******************************************
                // ******************************************
                // fetches
                // ******************************************
                // ******************************************

                function getGenreList() {

                    if (Object.keys(listGenres).length === 0) {
                        fetch(`/tracks?sort=fullGenreList`)
                            .then(response => {
                                if (response.ok) { // Check if response is OK (200-299)
                                    return response.json(); // If true, return the JSON data
                                } else {
                                    throw new Error(`Error ${response.status}: ${response.statusText}`); // Otherwise, rethrow an error
                                }

                            })
                            .then(data => {

                                data.forEach(track => {
                                    // console.log(track)
                                    const trackRow = document.createElement('tr');


                                    for (columns in track) {
                                        const column = track[columns]


                                        listGenres[column] = column

                                    } // each col


                                }); // each row

                                updateSearchGenres()
                                populateAutoComplete()
                            })
                            .catch(error => console.error('Error fetching tracks:', error))
                            ;
                    } // if empty


                } //getGenreList

                function fetchTable() {
                    const tracksDiv = document.getElementById('tracks');
                    tracksDiv.innerHTML = ''

                    const tableCount = document.getElementById('tableCount')
                    // console.log(rows)
                    tableCount.innerHTML = `0 rows`

                    if (searchGenres.length > 0) {


                        const params = new URLSearchParams();
                        searchGenres.forEach((item, index) => {
                            params.append(`genre[${index}]`, item);
                        });

                        fetch(`/tracks?sort=${sortType}&${params.toString()}`)
                            .then(response => {
                                if (response.ok) { // Check if response is OK (200-299)
                                    return response.json(); // If true, return the JSON data
                                } else {
                                    throw new Error(`Error ${response.status}: ${response.statusText}`); // Otherwise, rethrow an error
                                }

                            })
                            .then(data => {
                                const tracksDiv = document.getElementById('tracks');
                                tracksDiv.innerHTML = ''
                                // console.log(data)
                                const trackRow = document.createElement('tr');
                                for (label in data[0]) {
                                    const t1 = document.createElement('th');
                                    t1.textContent = label
                                    trackRow.appendChild(t1)
                                }
                                tracksDiv.appendChild(trackRow);

                                // tracksDiv.innerHTML = '<tr><th>ID</th><th>Playlist Name</th><th>Track Position</th><th>Artist</th><th>Name</th><th>Genre</th><th>Paired Name</th></tr>'
                                rows = Object.keys(data).length

                                const tableCount = document.getElementById('tableCount')
                                // console.log(rows)
                                tableCount.innerHTML = `${rows} rows`

                                // let debug = 0
                                data.forEach(track => {
                                    // console.log(track)
                                    const trackRow = document.createElement('tr');

                                    // if (debug === 0) {
                                    //     debug++
                                    //     console.log(track)
                                    // }

                                    for (columns in track) {
                                        const column = track[columns]


                                        const t1 = document.createElement('td');
                                        t1.textContent = (columns === 'pairedName' || columns === 'genre') ? column.slice(0, 18) + '…' : column
                                        trackRow.appendChild(t1)



                                    } // each col

                                    tracksDiv.appendChild(trackRow);
                                }); // each row

                            })
                            .catch(error => console.error('Error fetching tracks:', error))
                            ;
                    } // genres not empty

                }// fetch table
            </script>
    </body>

    </html>