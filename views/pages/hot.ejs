<%- include ('../partials/head.ejs') %>

    <style>
        #main {
            margin: 0 1rem;
        }

        #tableCount {
            margin-bottom: 0;
        }

        table {
            border-collapse: collapse;
            border: 1px solid var(--colorText);
            width: 100%;
        }

        td,
        th {
            border: 1px solid var(--colorText);
            min-width: auto
        }

        tr.tint0 {
            background-color: var(--colorSecondary1);
            color: var(--colorBackground);
        }

        tr.tint1 {
            background-color: var(--colorSecondary2);
        }

        tr.tint2 {
            background-color: var(--colorBackground);
        }

        tr.trackRow.hidden {
            display: none;
        }



        #options {
            align-items: center;
            display: flex;
            gap: 2rem;
        }

        #selectGenres {
            display: none;
            background-color: var(--colorBackground);
            border: 1px var(--colorSecondary1) solid;
            list-style: none;
            max-height: 18rem;
            padding: 0;
            position: absolute;
            left: 1rem;
            top: 5rem;
            overflow-y: auto;
            overflow-x: hidden;
            width: 12rem;
        }

        #selectGenres.active {
            display: block;
        }

        #selectGenres li {
            cursor: pointer;
            padding: .25rem;
        }

        #selectGenres li:hover {
            background-color: var(--colorSecondary2);
        }



        div#tags {
            padding: 0 1rem;
        }

        div.tag {
            background-color: var(--colorPrimary);
            color: var(--colorBackground);
            display: inline-block;
            font-size: 0.75rem;
            margin: 0 .25rem .25rem 0;
            padding: 0.25rem .5rem;
        }

        div.tagWrapper {
            align-items: center;
            display: flex;
            padding: 0 .5rem;
        }



        div.tag:hover {
            background-color: var(--colorSecondary1);
            cursor: pointer;
            color: var(--colorBackground)
        }

        div.tag:hover .icon svg path {
            fill: var(--colorBackground)
        }

        .icon {
            margin-left: .5rem;
            width: 1rem;
        }
    </style>
    </head>

    <body>


        <%- include ('../partials/nav.ejs') %>

            <!-- <p>"npm run dev" // "rs" to restart server live</p>
 -->

            <div id="filter">
                <div id="options">
                    <span>
                        <label for="inputGenre">Add Genre</label>
                        <input type="text" name="inputGenre" id="inputGenre" placeholder="Add Genre">
                    </span>

                    <div class="bttnrange">
                        <button id="bttnDateRangeAll" class="bttnrangeBttn active filterDateRange">All Dates</button>
                        <button id="bttnDateRangeRecent" class="bttnrangeBttn filterDateRange">Recent</button>
                    </div>


                    <div class="bttnrange">
                        <button id="bttnPrioritizeTracks" class="bttnrangeBttn active filterPrioritze">Tracks</button>
                        <button id="bttnPrioritizePlayCounts" class="bttnrangeBttn filterPrioritze">Play Counts</button>
                        <button id="bttnPrioritizeDate" class="bttnrangeBttn filterPrioritze">Latest Entry</button>
                    </div>
                    <ul id="selectGenres">

                    </ul>
                </div>
                <button id="bttnClearAll" class="">Clear All</button>

            </div>

            <div id="tags"></div>


            <div id="main">
                <p id="tableCount"></p>
                <table id="tracks"></table>
            </div>

            <script>
                // ******************************************
                // ******************************************
                // JS start vars
                // ******************************************
                // ******************************************

                let tablecount = 0;
                let sortType = 'hot'
                let currentGenre = ''
                let delayUpdate = ''
                let listGenres = {}
                let searchGenres = []
                let organizedGenres = {}
                let dateRangeAll = 0
                let prioritizeTracks = 0
                getGenreList()

                const inputGenre = document.getElementById("inputGenre")
                const tags = document.getElementById("tags")
                const selectGenres = document.getElementById("selectGenres")
                const bttnClearAll = document.getElementById("bttnClearAll")
                const bttnDateRangeAll = document.getElementById("bttnDateRangeAll")
                const bttnDateRangeRecent = document.getElementById("bttnDateRangeRecent")
                const bttnPrioritizeTracks = document.getElementById("bttnPrioritizeTracks")
                const bttnPrioritizePlayCounts = document.getElementById("bttnPrioritizePlayCounts")
                const bttnPrioritizeDate = document.getElementById("bttnPrioritizeDate")





                // ******************************************
                // ******************************************
                // genre input box
                // ******************************************
                // ******************************************


                // inputGenre.value = currentGenre
                inputGenre.addEventListener('keyup', (e) => {
                    currentGenre = inputGenre.value
                    selectGenres.className = 'active'
                    populateAutoComplete()

                    // clearTimeout(delayUpdate)
                    // delayUpdate = setTimeout(updateSearchGenres, 1500); // 5000 milliseconds = 5 seconds

                    if (event.key === 'Enter') {
                        delayUpdate = setTimeout(function () {
                            selectGenres.className = '';
                        }, 250)

                        updateSearchGenres()
                    }
                })



                inputGenre.addEventListener('focus', function (event) {

                    selectGenres.className = 'active';
                    populateAutoComplete()
                })

                inputGenre.addEventListener('blur', function (event) {
                    delayUpdate = setTimeout(function () {
                        selectGenres.className = '';
                    }, 250)
                })

                // ******************************************
                // ******************************************
                // buttons
                // ******************************************
                // ******************************************

                bttnClearAll.addEventListener('click', function (event) {
                    currentGenre = ''
                    searchGenres = []
                    prioritizeTracks = 0
                    dateRangeAll = 0

                    fetchTable()
                })


                // ******************************************
                // ******************************************
                // buttoinputDateRanges
                // ******************************************
                // ******************************************

                function toggleDateRange() {
                    const rows = document.getElementsByClassName('trackRow')

                    for (var i = 0; i < rows.length; i++) {
                        const row = rows[i]
                        if (dateRangeAll === 1) {


                            const today = new Date();
                            const pastDate = new Date(row.getAttribute('data-date')); // Replace with your date

                            const timeDifference = Math.abs(today - pastDate); // Convert time difference from milliseconds to days 
                            const dayDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));

                            if (dayDifference < 365 * 2) {
                                row.classList.remove('hidden')
                            } else {
                                row.classList.add('hidden')
                            }
                        } else {
                            row.classList.remove('hidden')
                        } // if range is limited or not
                    }
                }

                bttnDateRangeAll.addEventListener('click', function (event) {
                    dateRangeAll = 0
                    updateUI();

                    toggleDateRange()
                })

                bttnDateRangeRecent.addEventListener('click', function (event) {
                    dateRangeAll = 1
                    updateUI();
                    toggleDateRange()
                })

                // ******************************************
                // ******************************************
                // buttons for sort order priority
                // ******************************************
                // ******************************************


                bttnPrioritizeTracks.addEventListener('click', function (event) {
                    prioritizeTracks = 0

                    fetchTable()
                })

                bttnPrioritizePlayCounts.addEventListener('click', function (event) {
                    prioritizeTracks = 1

                    fetchTable()
                })


                bttnPrioritizeDate.addEventListener('click', function (event) {
                    prioritizeTracks = 2

                    fetchTable()
                })


                // ******************************************
                // ******************************************
                // autocomplete list 
                // ******************************************
                // ******************************************

                selectGenres.addEventListener('click', function (event) {

                    if (event.target && event.target.classList.contains('dynamic-element')) {

                        console.log(event.target.innerHTML)
                        currentGenre = ''




                        genres = organizedGenres[event.target.innerHTML]
                        for (var i = 0; i < genres.length; i++) {
                            searchGenres.push(genres[i])
                        }


                        delayUpdate = setTimeout(function () {
                            inputGenre.value = '';
                        }, 250)


                        fetchTable()
                    }
                });

                // ******************************************
                // ******************************************
                // tags
                // ******************************************
                // ******************************************
                function updateUI() {
                    tags.innerHTML = ''

                    for (var i = 0; i < searchGenres.length; i++) {
                        const entry = document.createElement('div');
                        entry.classList.add('tag');
                        entry.setAttribute('data-genre', searchGenres[i]);

                        entry.innerHTML = searchGenres[i]

                        tags.appendChild(entry)

                    }

                    const filterPrioritze = document.getElementsByClassName('filterPrioritze')
                    for (var i = 0; i < filterPrioritze.length; i++) {
                        if (prioritizeTracks === i) {
                            filterPrioritze[i].classList.add('active')
                        } else {
                            filterPrioritze[i].classList.remove('active')
                        }
                    }
                    const filterDateRange = document.getElementsByClassName('filterDateRange')
                    for (var i = 0; i < filterDateRange.length; i++) {
                        if (dateRangeAll === i) {
                            filterDateRange[i].classList.add('active')
                        } else {
                            filterDateRange[i].classList.remove('active')
                        }
                    }

                }


                tags.addEventListener('click', function (event) {
                    console.log(event.target)
                    if (event.target && event.target.classList.contains('tag')) {


                        const removeTag = decodeHtml(event.target.dataset.genre)

                        console.log(removeTag)

                        const index = searchGenres.indexOf(removeTag);
                        if (index !== -1) { searchGenres.splice(index, 1); }


                        fetchTable();
                    }
                });

                function decodeHtml(html) {
                    var txt = document.createElement("textarea");
                    txt.innerHTML = html;
                    return txt.value;
                }

                // ******************************************
                // ******************************************
                // update the list to send and fetch
                // ******************************************
                // ******************************************
                function updateSearchGenres() {

                    if (currentGenre !== '') {

                        // searchGenres = []
                        const regex = new RegExp(currentGenre, 'i'); // Create a case-insensitive regex

                        for (genre in listGenres) {
                            const stripped = genre.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, '');
                            if (regex.test(stripped)) {
                                searchGenres.push(genre)
                                // to list

                            } // test if serach is in genre
                        }//


                        console.log(searchGenres)
                    }

                    updateUI();
                    fetchTable()
                }


                // ******************************************
                // ******************************************
                // update the autocomplete
                // ******************************************
                // ******************************************
                function populateAutoComplete() {

                    const regex = new RegExp(inputGenre.value, 'i'); // Create a case-insensitive regex


                    selectGenres.innerHTML = ''
                    genreKeys = Object.keys(organizedGenres)
                    for (var i = 0; i < genreKeys.length; i++) {
                        if (regex.test(organizedGenres[genreKeys[i]])) {
                            const entry = document.createElement('li');
                            entry.classList.add('dynamic-element');

                            entry.innerHTML = genreKeys[i]
                            selectGenres.appendChild(entry)
                        } // test if serach is in genre
                    }

                }


                // ******************************************
                // ******************************************
                // get genre list
                // ******************************************
                // ******************************************

                function getGenreList() {

                    if (Object.keys(listGenres).length === 0) {
                        fetch(`/tracks?sort=fullGenreList`)
                            .then(response => {
                                if (response.ok) { // Check if response is OK (200-299)
                                    return response.json(); // If true, return the JSON data
                                } else {
                                    throw new Error(`Error ${response.status}: ${response.statusText}`); // Otherwise, rethrow an error
                                }

                            })
                            .then(data => {
                                let tempObj = {}
                                data.forEach(track => {


                                    for (columns in track) {
                                        const column = track[columns]


                                        listGenres[column] = column

                                        // organizedGenres

                                        // strip out all the punctuation, split by word, if less than 3 char - kick out, check if cluster exists, add the original genre to each cluster

                                        let stripped = column.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, ' ');
                                        stripped = stripped.toLowerCase()
                                        const clusters = stripped.split(' ')

                                        for (var i = 0; i < clusters.length; i++) {
                                            if (clusters[i].length > 2) {
                                                if (!tempObj[clusters[i]]) tempObj[clusters[i]] = []

                                                tempObj[clusters[i]].push(column)
                                            }
                                        }


                                    } // each col


                                }); // each row


                                const genreKeys = Object.keys(tempObj)

                                for (var i = 0; i < genreKeys.length; i++) {
                                    if (tempObj[genreKeys[i]].length > 1) {
                                        organizedGenres[genreKeys[i]] = tempObj[genreKeys[i]]
                                    }
                                }


                                console.log(organizedGenres)


                                updateSearchGenres()

                            })
                            .catch(error => console.error('Error fetching tracks:', error))
                            ;
                    } // if empty


                } //getGenreList

                // ******************************************
                // ******************************************
                // fetches table
                // ******************************************
                // ******************************************

                function fetchTable() {
                    const tracksDiv = document.getElementById('tracks');
                    tracksDiv.innerHTML = ''

                    const tableCount = document.getElementById('tableCount')
                    // console.log(rows)
                    tableCount.innerHTML = `0 total rows`

                    const params = new URLSearchParams();
                    searchGenres.forEach((item, index) => {
                        params.append(`genre[${index}]`, item);
                    });

                    fetch(`/tracks?sort=${sortType}&prioritizeTracks=${prioritizeTracks}&${params.toString()}`)
                        .then(response => {
                            if (response.ok) { // Check if response is OK (200-299)
                                return response.json(); // If true, return the JSON data
                            } else {
                                throw new Error(`Error ${response.status}: ${response.statusText}`); // Otherwise, rethrow an error
                            }

                        })
                        .then(data => {
                            const tracksDiv = document.getElementById('tracks');
                            tracksDiv.innerHTML = ''
                            // console.log(data)
                            const trackRow = document.createElement('tr');
                            for (label in data[0]) {
                                const t1 = document.createElement('th');
                                t1.textContent = label
                                trackRow.appendChild(t1)
                            }
                            tracksDiv.appendChild(trackRow);

                            // tracksDiv.innerHTML = '<tr><th>ID</th><th>Playlist Name</th><th>Track Position</th><th>Artist</th><th>Name</th><th>Genre</th><th>Paired Name</th></tr>'
                            rows = Object.keys(data).length

                            const tableCount = document.getElementById('tableCount')
                            // console.log(rows)
                            tableCount.innerHTML = `${rows} total rows`

                            // let debug = 0
                            data.forEach(track => {
                                // console.log(track)
                                const trackRow = document.createElement('tr');
                                trackRow.className = 'trackRow'
                                // if (debug === 0) {
                                //     debug++
                                //     console.log(track)
                                // }

                                for (columns in track) {
                                    const column = track[columns]


                                    const t1 = document.createElement('td');
                                    t1.textContent = (columns === 'pairedName' || columns === 'genre') ? column.slice(0, 18) + '…' : column
                                    trackRow.appendChild(t1)

                                    if (columns === 'latest entry') {
                                        // console.log(column)
                                        trackRow.setAttribute('data-date', column)

                                        const today = new Date();
                                        const pastDate = new Date(column); // Replace with your date

                                        const timeDifference = Math.abs(today - pastDate); // Convert time difference from milliseconds to days 
                                        const dayDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));

                                        if (dayDifference < 365) {
                                            trackRow.classList.add('tint0')
                                        } else if (dayDifference > 365 && dayDifference < 365 * 2) {
                                            trackRow.classList.add('tint1')
                                        } else {
                                            trackRow.classList.add('tint2')
                                        }
                                    }



                                } // each col

                                tracksDiv.appendChild(trackRow);
                            }); // each row
                            toggleDateRange()
                            updateUI();
                        })
                        .catch(error => console.error('Error fetching tracks:', error))
                        ;


                }// fetch table
            </script>
    </body>

    </html>